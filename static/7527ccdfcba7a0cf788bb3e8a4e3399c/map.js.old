import React from "react"
import Helmet from "react-helmet"
// import L from "leaflet"
// import Map from "../components/Map"
import { graphql } from "gatsby"
// import MapStyles from "../styles/_map.scss"
import { Map, Marker, Popup, TileLayer } from "react-leaflet"
import GeoTools from "../utils/GeoTools"

const LOCATION = {
	lat: 38.9072,
	lng: -77.0369,
}

const LeafletMap = Map

const position = [51.505, -0.09]

const CENTER = [LOCATION.lat, LOCATION.lng]
const DEFAULT_ZOOM = 4

const MapPage = ({ data }) => {
	console.log(data)
	const queryMapData = data.allClip.nodes
	/**
	 * mapEffect
	 * @description Fires a callback once the page renders
	 * @example Here this is and example of being used to zoom in and set a popup on load

	const mapEffect = ({ leafletElement } = {}) => {
		if (!leafletElement) return

		leafletElement.eachLayer(layer => leafletElement.removeLayer(layer))

		const tripPoints = GeoTools.createClipPointsGeoJson(queryMapData)
		// const tripLines = createTripLinesGeoJson({ locations })

		const tripPointsGeoJsonLayers = new L.geoJson(tripPoints, {
			pointToLayer: tripStopPointToLayer,
		})

		// const tripLinesGeoJsonLayers = new L.geoJson(tripLines)

		tripPointsGeoJsonLayers.addTo(leafletElement)
		// tripLinesGeoJsonLayers.addTo(leafletElement)

		const bounds = tripPointsGeoJsonLayers.getBounds()

		leafletElement.fitBounds(bounds)
	}

	const mapSettings = {
		center: CENTER,
		defaultBaseMap: "OpenStreetMap",
		zoom: DEFAULT_ZOOM,
		mapEffect,
	}

	// <Map {...mapSettings} />
	 */
	return (
		<div>
			<Helmet>
				<title>Map</title>
			</Helmet>

			<LeafletMap center={position} zoom={DEFAULT_ZOOM}>
				<TileLayer
					url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
					attribution='&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
				/>
				<Marker position={position}>
					<Popup>
						A pretty CSS3 popup.
						<br />
						Easily customizable.
					</Popup>
				</Marker>
			</LeafletMap>
		</div>
	)
}

export default MapPage

/**
 * tripStopPointToLayer


function tripStopPointToLayer(feature = {}, latlng) {
	const { properties = {} } = feature
	const { placename, textData = [], image, date } = properties

	const list = textData.map(what => `<li>${what}</li>`)
	let listString = ""
	let imageString = ""

	if (Array.isArray(list) && list.length > 0) {
		listString = list.join("")
		listString = `
      <p>Things we will or have done...</p>
      <ul>${listString}</ul>
    `
	}

	if (image) {
		imageString = `
      <span class="trip-stop-image" style="background-image: url(${image})">${placename}</span>
    `
	}

	const text = `
    <div class="trip-stop">
      ${imageString}
      <div class="trip-stop-content">
        <h2>${placename}</h2>
        <p class="trip-stop-date">${date}</p>
        ${listString}
      </div>
    </div>
  `

	const popup = L.popup({
		maxWidth: 400,
	}).setContent(text)

	const layer = L.marker(latlng, {
		icon: L.divIcon({
			className: "icon",
			html: `<span class="icon-trip-stop"></span>`,
			iconSize: 20,
		}),
		riseOnHover: true,
	}).bindPopup(popup)

	return layer
}
 */
export const query = graphql`
	query MapGeoData {
		__typename
		allClip {
			nodes {
				clip {
					title
					topic
					slug
					location
					locationData {
						location {
							lat
							lng
						}
						placename
						geoMetadata {
							country
						}
					}
				}
			}
		}
	}
`
